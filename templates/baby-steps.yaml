# Baby Stepsâ„¢ Methodology - Universal Template
# Core operational directive for incremental, validated progress

metadata:
  name: "Baby Stepsâ„¢ Methodology"
  version: "1.0"
  description: "Universal framework for incremental development"
  tags: ['methodology', 'process', 'validation', 'best-practices']

philosophy:
  core_principle: "The process is the product"
  
  manifesto: |
    Every action taken, every line of code written, and every plan formulated 
    must adhere to this directive. The primary goal is not just to complete tasks, 
    but to demonstrate and internalize the process of how they are accomplished.
    
    This methodology is technology-agnostic and applies to any development process.

# The Six Universal Rules
rules:
  rule_1:
    name: "The Smallest Possible Meaningful Change"
    description: "Break down any task into the smallest possible meaningful change"
    
    implementation:
      - "Never attempt multiple things at once"
      - "Each action must be atomic and complete"
      - "Changes must be clearly understood and documented"
      - "Every step must be independently validatable"
    
    examples:
      - "One function at a time, not entire modules"
      - "One bug fix at a time, not multiple fixes"
      - "One configuration change at a time"
      - "One dependency update at a time"
    
  rule_2:
    name: "The Process is the Product"
    description: "The journey of learning and execution is more important than the destination"
    
    implementation:
      - "Document the HOW, not just the WHAT"
      - "Capture decision-making process and rationale"
      - "Record learning moments and insights"
      - "Share knowledge gained with the team"
    
    documentation_template: |
      ## Step {{NUMBER}}: {{ACTION}}
      
      **What**: {{WHAT_WAS_DONE}}
      **Why**: {{WHY_IT_WAS_DONE}}
      **How**: {{HOW_IT_WAS_DONE}}
      **Learning**: {{WHAT_WAS_LEARNED}}
      **Next**: {{WHAT_COMES_NEXT}}
    
  rule_3:
    name: "One Substantive Accomplishment at a Time"
    description: "Focus on one, and only one, substantive accomplishment at a time"
    
    implementation:
      - "Complete current task before starting next"
      - "Maintain singular focus throughout"
      - "Resist scope creep and feature additions"
      - "Define clear task boundaries upfront"
    
    focus_techniques:
      - "Use task tracking to maintain focus"
      - "Block time for single tasks"
      - "Disable notifications during work"
      - "Regular check-ins on scope"
    
  rule_4:
    name: "Complete Each Step Fully"
    description: "Each step must reach a state of completion before moving forward"
    
    completion_checklist:
      - "[ ] Implementation finished"
      - "[ ] Validation completed"
      - "[ ] Documentation updated"
      - "[ ] Tests passing (if applicable)"
      - "[ ] Code reviewed (if applicable)"
      - "[ ] Knowledge transferred"
    
    definition_of_done:
      - "Works as specified"
      - "No known issues"
      - "Properly documented"
      - "Can be understood by others"
    
  rule_5:
    name: "Incremental Validation is Mandatory"
    description: "Validate your work after every single step"
    
    validation_methods:
      - "Run tests immediately after changes"
      - "Check for compilation/syntax errors"
      - "Verify expected behavior manually"
      - "Get feedback from tools or systems"
      - "Confirm integration with existing code"
    
    validation_frequency:
      minimum: "After every file save"
      recommended: "After every logical change"
      required: "Before moving to next step"
    
  rule_6:
    name: "Document Every Step with Focus"
    description: "Documentation is an integral part of the process, not an afterthought"
    
    documentation_requirements:
      - "Specific and focused detail"
      - "Clear changelogs for every modification"
      - "Progress reports at regular intervals"
      - "Decision rationale for important choices"
      - "Lessons learned from challenges"
    
    documentation_formats:
      inline_comments: "Explain complex logic"
      commit_messages: "Describe what and why"
      progress_logs: "Track journey and learnings"
      readme_updates: "Keep instructions current"

# Application Guidelines by Context
application:
  for_new_features:
    planning:
      - "Break feature into components"
      - "Define interfaces between components"
      - "Plan integration points"
      - "Set validation criteria for each component"
    
    execution:
      - "Build one component at a time"
      - "Test component in isolation"
      - "Integrate incrementally"
      - "Validate at each integration point"
    
  for_bug_fixes:
    approach:
      - "Reproduce bug first"
      - "Write failing test"
      - "Make minimal fix"
      - "Verify test passes"
      - "Check for regressions"
      - "Document root cause"
    
  for_refactoring:
    process:
      - "Ensure test coverage first"
      - "Change one pattern at a time"
      - "Maintain functionality throughout"
      - "Verify tests after each change"
      - "Keep commits atomic"
    
  for_configuration:
    method:
      - "Change one setting at a time"
      - "Test after each change"
      - "Document what each setting does"
      - "Keep rollback plan ready"

# Project-Specific Customization
customization:
  variables:
    # Define your project-specific values
    max_lines_per_change: "{{MAX_LINES}}"  # e.g., 50, 100
    max_files_per_commit: "{{MAX_FILES}}"  # e.g., 5, 10
    validation_timeout: "{{TIMEOUT_SECONDS}}"  # e.g., 30, 60
    documentation_detail_level: "{{LEVEL}}"  # minimal, standard, detailed
  
  project_rules:
    # Add project-specific rules
    - "{{CUSTOM_RULE_1}}"
    - "{{CUSTOM_RULE_2}}"
  
  technology_specific:
    # Add technology-specific guidelines
    "{{TECH_STACK}}":
      validation_command: "{{VALIDATION_CMD}}"
      test_command: "{{TEST_CMD}}"
      build_command: "{{BUILD_CMD}}"

# Tracking and Metrics
tracking:
  progress_indicators:
    - metric: "Steps completed"
      measurement: "count"
      target: "{{TARGET}}"
    
    - metric: "Validation success rate"
      measurement: "percentage"
      target: ">95%"
    
    - metric: "Documentation completeness"
      measurement: "percentage"
      target: "100%"
    
    - metric: "Average step duration"
      measurement: "minutes"
      target: "<{{MAX_DURATION}}"
  
  quality_metrics:
    - "Steps requiring rework"
    - "Issues found in validation"
    - "Documentation clarity score"
    - "Knowledge transfer effectiveness"
  
  reporting:
    format: "[STEP {{number}}] {{action}} - {{status}} ({{duration}})"
    
    example: |
      [STEP 1] Create user model - âœ… Complete (15 min)
      [STEP 2] Add validation - âœ… Complete (10 min)
      [STEP 3] Write tests - ğŸ”„ In Progress

# Integration with Development Workflow
integration:
  version_control:
    commit_strategy:
      - "One commit per baby step"
      - "Clear, descriptive commit messages"
      - "Include step number in commit"
    
    example_commit: |
      [STEP 3] Add user authentication
      
      - Implemented JWT token generation
      - Added login endpoint
      - Validated with Postman
      - Next: Add refresh token support
  
  ci_cd:
    - "Run validation after each push"
    - "Block merge if steps incomplete"
    - "Generate step completion reports"
  
  code_review:
    - "Review one step at a time"
    - "Verify baby steps methodology followed"
    - "Check documentation completeness"
  
  project_management:
    - "Track steps as sub-tasks"
    - "Estimate based on step count"
    - "Report progress by steps completed"

# Common Patterns and Examples
examples:
  task_breakdown:
    original_task: "Implement user authentication"
    
    baby_steps_breakdown:
      - step: 1
        action: "Create user model/schema"
        validation: "Model compiles/validates"
        duration: "15 min"
      
      - step: 2
        action: "Add password hashing"
        validation: "Hashing works correctly"
        duration: "20 min"
      
      - step: 3
        action: "Create registration endpoint"
        validation: "Can register user"
        duration: "30 min"
      
      - step: 4
        action: "Add input validation"
        validation: "Invalid input rejected"
        duration: "20 min"
      
      - step: 5
        action: "Create login endpoint"
        validation: "Can login with credentials"
        duration: "25 min"
      
      - step: 6
        action: "Implement token generation"
        validation: "Token generated correctly"
        duration: "20 min"
      
      - step: 7
        action: "Add authentication middleware"
        validation: "Routes protected"
        duration: "25 min"
      
      - step: 8
        action: "Write tests"
        validation: "All tests pass"
        duration: "40 min"
      
      - step: 9
        action: "Document API"
        validation: "Docs complete and accurate"
        duration: "20 min"

# Enforcement and Compliance
enforcement:
  mandatory_checks:
    before_starting:
      - "Is the task broken down into baby steps?"
      - "Is each step clearly defined?"
      - "Are validation criteria specified?"
    
    during_execution:
      - "Am I working on only one step?"
      - "Is this the smallest meaningful change?"
      - "Have I validated the current step?"
    
    before_moving_on:
      - "Is the current step complete?"
      - "Has it been validated?"
      - "Is it documented?"
      - "Can someone else understand it?"
  
  non_compliance_handling:
    detection: "Automated checks in CI/CD"
    response: "Block until compliance achieved"
    escalation: "Notify team lead after repeated violations"
  
  rewards:
    - "Recognition for consistent compliance"
    - "Reduced review requirements for compliant developers"
    - "Faster approval process for baby-steps PRs"

# Benefits and Rationale
benefits:
  for_developers:
    - "Reduced debugging time"
    - "Easier code reviews"
    - "Less context switching"
    - "Clearer progress tracking"
    - "Better learning retention"
  
  for_teams:
    - "Improved knowledge sharing"
    - "Consistent development practices"
    - "Predictable delivery"
    - "Higher quality output"
    - "Reduced technical debt"
  
  for_projects:
    - "Better documentation"
    - "Easier onboarding"
    - "Reduced bugs"
    - "Improved maintainability"
    - "Clearer audit trail"

# Getting Started
getting_started:
  steps:
    - "Read and understand the six rules"
    - "Practice on a small task"
    - "Get feedback on your approach"
    - "Gradually apply to larger tasks"
    - "Share learnings with team"
  
  resources:
    - "Baby Steps workshop materials"
    - "Example projects using methodology"
    - "Video tutorials"
    - "Cheat sheets and quick references"
  
  support:
    - "Team mentoring program"
    - "Pair programming sessions"
    - "Regular methodology reviews"
    - "Continuous improvement discussions"